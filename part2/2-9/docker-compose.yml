version: "3.8"

services:
  redis-service:
    image: redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - ./redis:/data
    networks:
      - database-network

  postgres-service:
    image: postgres:13.2-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: postgres
    volumes:
      - ./database:/var/lib/postgresql/data
    networks:
      - database-network

  backend:
    build:
      context: ./example-backend
      dockerfile: Dockerfile.back
      args:
        - PORT=8080
        - REDIS_HOST=redis-service
        - POSTGRES_HOST=postgres-service
        - POSTGRES_PASSWORD=example
        - REQUEST_ORIGIN=*
    depends_on:
      - postgres-service
      - redis-service
    networks:
      - database-network
      - web
    environment:
      - WAITH_HOSTS=postgres-service:5432
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=30
      - WAIT_HOST_CONNECT_TIMEOUT=30

  frontend:
    build:
      context: ./example-frontend
      dockerfile: Dockerfile.front
      args:
        - PORT=5000
        - REACT_APP_BACKEND_URL=http://localhost/api/
    depends_on:
      - postgres-service
      - redis-service
    volumes:
      - frontend_data:/usr/src/app/public
    networks:
      - web

  nginx-service:
    image: nginx:1.19-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - frontend
    networks:
      - web
    environment:
      - WAITH_HOSTS=postgres-service:5432, backend:8080, frontend:5000
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=30
      - WAIT_HOST_CONNECT_TIMEOUT=30

volumes:
  frontend_data:

networks:
  database-network:
    name: database-network
  web:
    name: web
